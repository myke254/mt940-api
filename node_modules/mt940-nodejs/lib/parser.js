"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tokens_1 = require("./tokens");
var transaction_reference_number_1 = require("./tags/transaction-reference-number");
var related_reference_number_1 = require("./tags/related-reference-number");
var account_id_1 = require("./tags/account-id");
var statement_number_1 = require("./tags/statement-number");
var opening_balance_1 = require("./tags/opening-balance");
var closing_available_balance_1 = require("./tags/closing-available-balance");
var forward_available_balance_1 = require("./tags/forward-available-balance");
var closing_balance_1 = require("./tags/closing-balance");
var information_for_account_owner_1 = require("./tags/information-for-account-owner");
var transaction_info_1 = require("./tags/transaction-info");
var tags = [
    transaction_reference_number_1.default,
    related_reference_number_1.default,
    account_id_1.default,
    statement_number_1.default,
    information_for_account_owner_1.default,
    opening_balance_1.default,
    closing_balance_1.default,
    closing_available_balance_1.default,
    forward_available_balance_1.default,
    transaction_info_1.default
];
var tagsCount = tags.length;
function closeCurrentTag(state, options) {
    if (state.tag && state.tag.close) {
        state.tag.close(state, options);
    }
}
function read(data, options) {
    var length = data.length;
    var state = {
        pos: 0,
        statementIndex: -1,
        transactionIndex: -1,
        data: data,
        statements: []
    };
    while (state.pos < length) {
        var symbolCode = data[state.pos];
        var skipReading = false;
        // check if it's a tag
        if (symbolCode === tokens_1.colonSymbolCode && (state.pos === 0 || data[state.pos - 1] === tokens_1.newLineSymbolCode)) {
            for (var i = 0; i < tagsCount; i++) {
                var tag = tags[i];
                var newPos = tag.readToken(state);
                if (newPos) {
                    closeCurrentTag(state, options);
                    state.pos = newPos;
                    state.tagContentStart = newPos;
                    state.tagContentEnd = newPos;
                    state.tag = tag;
                    if (state.tag.open) {
                        state.tag.open(state);
                    }
                    break;
                }
            }
        }
        else if (symbolCode === tokens_1.newLineSymbolCode || symbolCode === tokens_1.returnSymbolCode) {
            skipReading = !state.tag || !state.tag.multiline;
        }
        if (!skipReading && state.tag) {
            state.tagContentEnd++;
            if (state.tag.readContent) {
                state.tag.readContent(state, data[state.pos]);
            }
        }
        state.pos++;
    }
    closeCurrentTag(state, options);
    return Promise.resolve(state.statements);
}
exports.read = read;
